Zabbix Manual 
================================
 
Please see ../INSTALL for installation instructions.


1. Introduction

1.1 About the manual
1.2 Acknowledgements
1.3 What is Zabbix ?
1.4 What does Zabbix offer ?

2. Use of Zabbix
2.1 Performance monitoring
2.2 Alarming users
2.3 Integrity checking
2.4 Logging services
2.5 Capacity planning

3. Overview
3.1 zabbix_suckerd
3.2 zabbix_agent
3.3 zabbix_agentd
3.4 zabbix_trapper
3.5 zabbix_trapperd
3.6 zabbix_sender
3.7 Database
3.8 WEB-based frontend
3.9.1 Reports
3.9.1.1 Status of Zabbix
3.9.1.2 Availability report

4. Configuration
4.1 Expressions for Triggers
4.2 Parameters
4.3 Supported parameters by platform

5. Miscellaneous
5.1 pinger.pl
5.2 PostgreSQL notes

Appendix A (Examples of item configuration)
Appendix B (Examples of trigger configuration)



1 Introduction

1.1 About the manual

This manual is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

This manual is part of Zabbix software.

The latest version of the manual will always be available at

http://zabbix.sourceforge.net

1.2 Acknowledgements

I want to thank the guys from sourceforge.net for providing hosting for
the project. 

I also want to thank all the Zabbix users who have sent corrections and suggestions.  This sort of feedback helps me make the software better.

1.3 What is Zabbix ?

Zabbix was created by Alexei Vladishev, (alex@gobbo.caves.lv).

Zabbix is software that monitors numerous parameters of a network and the servers on that network.  Zabbix is a useful tool for monitoring the health and integrity of servers.  A flexible notification mechanism allows users to configure e-mail based alerts for virtually any event, allowing fast reaction to server problems. 

All monitored parameters are stored in a database.  Zabbix offers excellent reporting and data visualisation features based on the stored data, making Zabbix useful for capacity planning.  

Zabbix supports both polling and trapping. 

All Zabbix reports and statistics, as well as configuration parameters, are accessed through a web-based frontend.   The web-based front end means that the health of your servers can be assessed from any location.  

Properly configured, Zabbix can play an important role in monitoring IT infrastructure for companies with even hundreds of servers to monitor. 

Zabbix is free of cost.  If support is an issue for you, several options are available as well.  Please, contact alex@gobbo.caves.lv to get additional information on available support levels. 

The latest version of Zabbix can be found at http://zabbix.sourceforge.net.

1.5 What does Zabbix offer ?

Zabbix offers:

 - support for both polling and trapping mechanisms
 - agents (client software) for Linux (HP-UX, AIX, FreeBSD, OpenBSD are coming soon)
 - server software for Linux (other UNIX variants to be supported soon)
 - secure user authorisation
 - two user groups: "Administrators" and "Zabbix users"
 - web-based interface for viewing and configuration
 - flexible e-mail notification of predefined events

2. Use of Zabbix

2.1 Performance monitoring

One of most important uses of Zabbix is performance monitoring.  Processor load, number of running processes, number of processes, disk activity, status of swap space, and memory availability are some of the numerous system parameters Zabbix is able to monitor. Zabbix provides a system administrator with timely information about performance of a server.  In addition, Zabbix can produce trend graphs to help identify bottlenecks in system performance. 

2.2 Alerting users

Having performance monitoring is good, but it is almost useless without a powerful notification mechanism. With Zabbix, an administrator can define virtually any possible condition for a trigger, using flexible expressions.  Any time these expressions become true, an alert will be emailed to any addresses defined by the administrator.

For example, suppose you wish to be notified when /etc/passwd is changed by someone. You define a trigger with expression {sourceforge.net:cksum[/etc/passwd].diff(0)}>0.  The "diff" function is true when the current value received by Zabbix is different than the previous value.  Therefore, this expression will be true whenever /etc/passwd is changed.   Next, you define one or more actions that will be performed when the trigger is true.  Add an action to email your account, you will get email notification anytime /etc/passwd is changed.

2.3 Integrity checking

Zabbix can easily be used for servers integrity monitoring.  All critical configuration files, binaries, kernel, scripts, and web server HTML pages can be monitored by Zabbix so that the administrator can be alerted to modifications made to these files.

2.4 Logging services

All values of monitored parameters are stored in a database. The collected data can be used later for any purposes.

2.5 Capacity planning

Viewing trends of process load, disk usage, database activity, or other important metrics allows a system administrator to clearly see when the next hardware upgrade should be made.



3. Overview

Zabbix is structured in a client-server architecture. The Zabbix server (zabbix_suckerd) periodically connects to an agent placed on the monitored host, asks for specific information (processor load, free memory, available inodes, etc). The agent provides the server with the requested information and the server, in turn, stores the received values in the database.

Zabbix also supports the use of a trapping method. In this case, the monitored host sends information to Zabbix server.

3.1 zabbix_suckerd

The Zabbix server process.

SYNOPSIS

zabbix_suckerd

DESCRIPTION

The zabbix_suckerd process periodically connects to agents (either Zabbix native or SNMP) to get the values of parameters being monitored.  After receiving the values, the process recalculates the status of Zabbix triggers.  Also, the process sends alerts to users if required.

By default, zabbix_suckerd forks ten copies of itself.  This means that Zabbix will be able to get ten monitored parameters simultaneously.  To modify the number of forked processes, change the parameter SUCKER_FORKS in include/common.h. 

One zabbix_suckerd process is used for housekeeping purposes only.  The housekeeping process periodically (hourly, by default) deletes outdated information from table history.

No command line switches are supported by zabbix_suckerd.

The zabbix_suckerd process is run as a daemon under a non-priveledged user account, usually zabbix.  

Syslog is used to store debug information for the process.


3.2 zabbix_agent

The Zabbix agent (called from inetd).

SYNOPSIS

zabbix_agent

DESCRIPTION

The zabbix_agent process resides on the host being monitored.  Its purpose it to provide requested information to zabbix_suckerd.  The zabbix_agent process is designed to be used with INETD daemon.

Execution time of the process is limited. If the agent is not able to get the requested information within 3 seconds, it kills itself. 

When a connection to zabbix_agent is made, the agent reads /etc/zabbix/zabbix_agent.conf in order to determine if the connection is coming from an authorized server.  The zabbix_agent.conf file must exist and contain the IP address of Zabbix server. Connections from other IPs are rejected. 
 
If possible, use of zabbix_agentd (see below) instead of zabbix_agent is recommended.  The zabbix_agentd process does not require extra fork() and exec() calls for every connection.

3.3 zabbix_agentd

Standalone Zabbix agent (daemon).

SYNOPSIS

zabbix_agentd

DESCRIPTION

The zabbix_agentd process resides on the host being monitored. Its purpose is to provide request information to zabbix_suckerd.  This is the daemon version of the zabbix_agent process.  

When executed, the zabbix_agentd process forks himself (ten times by default).  Load is balanced between each copy of the process.

When a connection to zabbix_agent is made, the agent reads /etc/zabbix/zabbix_agent.conf in order to determine if the connection is coming from an authorized server.  The zabbix_agent.conf file must exist and contain the IP address of Zabbix server. Connections from other IPs are rejected.

No command-line switches supported by zabbix_agentd.

The process is run as daemon under non-priveledged user account, usually zabbix.  

Syslog is used to store debug information for the process.

3.4 zabbix_trapper

The Zabbix trapping server process.

SYNOPSIS

zabbix_trapper

DESCRIPTION

The process provides trapping support for Zabbix.  It constantly waits for connections from zabbix_sender agents.  It is designed to be used with inetd daemon.

If possible, it is recommended that zabbix_trapperd is used to provide trapping support.   The zabbix_trapperd process does not require extra fork() and exec() calls for every connection. 

3.5 zabbix_trapperd

Zabbix trapping server process (daemon).

SYNOPSIS

zabbix_trapperd

DESCRIPTION

The process collects information passed by active agents (zabbix_sender).

By default, zabbix_trapperd forks ten copies of itself.  The parameter TRAPPERD_FORKS in include/common.h can be changed to modify the number of forked processes. 

No command-line switches are supported by zabbix_trapperd.

The process is run as daemon under non-priveledged user account, usually zabbix.   

Syslog is used to store debug information for the process.

3.6 zabbix_sender

The Zabbix trapping agent.

SYNOPSIS

zabbix_sender zabbix_server port host:key value

DESCRIPTION

The process, when executed, sends information to Zabbix.

	zabbix_server	Name or IP address of Zabbix server to connect.
	port		Port number to connect to Zabbix. It is port number of zabbix_trapper process.
	host:key	Host name and key for value.
	value		Value for parameter "host:key". Float number. 

EXAMPLE:

zabbix_sender zabbix.abcde.com 10001 db.abcde.com:procload 2.34

In this example, zabbix_sender will send information about processor load on host db.abcde.com to Zabbix server located at zabbix.acbde.com.  The processor load is 2.34.


3.7 Database

Database use plays a very important role in the Zabbix application.  The entire history of received parameter values is stored in the database.   In addition, the database is the sole source of configuration parameters for the application.

Zabbix performance depends highly on the efficiency and speed of the database used by Zabbix.
 
3.8 WEB-based frontend

The frontend provides a convenient and platform-independent method for accessing Zabbix.  Information provided by the frontend can be either graphical or textual.  While graphical representations usually provide the easiest method to understand trends, the text representation of monitored parameters 
is intended to provide an easy way to export Zabbix data to other analytical tools.

3.8.1 Reports

Zabbix reports represent collected information in structured way. All reports are produced in HTML format.

Report generation can be a very time consuming operation. Additionally, if you use MySQL or ay other database with table locking, zabbix_suckerd and zabbix_trapper will wait until the report is finished.

3.8.1.1 Status of Zabbix

This report gives general information about the Zabbix server including:

 - whether the main Zabbix process is running?
 - number of values stored in table history
 - number of triggers
 - number of parameters monitored
 - number of users
 - number of hosts 


3.8.1.2 Availability report

This report calculates amount of time a trigger has been in true and false states. 

For example, suppose you want to know what percentage of the time your web server is down.  Assuming you have been monitoring the web server and have the "WEB server is down" trigger enabled, the availability report will display what percentage of the time the trigger was in the true state (web server down) and in the false state (web server running).  



4. Configuration


4.1 Expressions for triggers

The expressions used in triggers are very flexible.  You can use them to create complex logical tests regarding monitored statistics.

The following operators are supported for triggers:

> - more than
< - less than
| - logical OR
& - logical AND

The following functions are supported:

last	- last (most recent) value, parameter is ignored 
min	- MIN value for period of time, parameter - time in sec
max	- MAX value for period of time, parameter - time in sec
diff	- 1 - if last and previous values are different, 0 - otherwise
prev	- previous value, parameter is ignored

A simple useful expression might look like:

{<server>:<key>.<function>(<parameter>)}<operator><const>

Example 1:

{sourceforge.net:procload.last(0)}>5

'sourceforge.net:procload' gives a short name of monitored parameter.  It specifies that the server is 'sourceforge.net' and the key being monitored is
'procload'.  By using the function 'last(),' we are specifying we are referring to the most recent value.  Finally, '>5' means that the trigger is true whenever the most recent procload measurement from sourceforge.net is greater than 5.

Example 2:

More complex example:

({sourceforge.net:system[procload].last(0)}>5) | ({sourceforge.net:system[procload].min(600)}>2)

The expression is true when either the current processor load is more than 5 or the processor load was more than 2 during last 10 minutes.

Example 3:

Use of diff function.

({sourceforge.net:cksum[/etc/passwd].diff(0)})>0

The expression is true when the previous value of checksum of /etc/passwd differs from the most recent one.

Similiar expressions could be useful to monitor changes in important files, such as /etc/passwd, /etc/inetd.conf, /kernel, etc.

4.2 Parameters

- memory[total]

Total amount of installed physical memory.

- memory[shared]

Amount of used shared memory.

- memory[buffers]

Amount of memory used for kernel buffers.

- memory[cached]

Amount of cached memory.

- memory[free]

Amount of unused physical memory.

- diskfree[*]

Amount of unused disk space for given volume.

Example:

diskfree[/] - returns free disk space for root volume.

- inodefree[*]

Number of unused inodes space for given volume.

Example:

inodefree[/var] - returns number of free inodes for volume /var

- cksum[*]

Check sum of given file.

Note, that currently all supported file names are hardcoded to sysinfo.c

Example:

cksum[/etc/passwd]

- filesize[*]

Size of given file.

Example:

filesize[/var/log/syslog]

- proc_cnt[*]

Number of processes called "*" running.

Example:

proc_cnt[inetd]

- swap[free]

Free swap space.

- swap[total]

Total swap space.

- swap[free]

Free swap space.

- system[procload]

Load average for last 1 minute.

- system[procload5]

Load average for last 5 minutes.

- system[procload15]

Load average for last 15 minutes.

- system[proccount]

Number of processes.

- system[procrunning]

Number of running processes.

- system[uptime]

System's uptime.

- system[users]

Number of users connected.

- ping

Always return 1.

- tcp_count

Number of established TCP connections.

- check_service[ftp]

Check either FTP server is running and accepting connections.

Result: 0 - FTP server is down
	1 - FTP server is running

- check_service[ssh]

Check either SSH server is running and accepting connections.

Result: 0 - SSH server is down
	1 - SSH server is running

- check_service[smtp]

Check either Email (SMTP) server is running and accepting connections.

Result: 0 - SMTP server is down
	1 - SMTP server is running

- check_service[pop]

Check either POP server is running and accepting connections.

Result: 0 - POP server is down
	1 - POP server is running

- check_service[nntp]

Check either NNTP server is running and accepting connections.

Result: 0 - NNTP server is down
	1 - NNTP server is running

- check_service[imap]

Check either IMAP server is running and accepting connections.

Result: 0 - IMAP server is down
	1 - IMAP server is running

- check_port[*]

Check either possible to connect to port number "*".

Result: 0 - can connect
	1 - cannot connect

Example: Use check_port[80] to check either WEB server accepts connections.

4.3 Supported parameters by platform

PARAMETER / SYSTEM          | Debian Woody | Debian Potato | FreeBSD 4.3 | Solaris 5.8 | HP-UX 11.00 |  AIX 4.3  |
                            |    (i386)    |      (i386)   |    (i386)   | (Ultra-60)  |  9000/800   | (PowerPC) |
----------------------------------------------------------------------------------------------------------------------
memory[total]               |       X      |        X      |      -      |      -      |      x      |     -     |
memory[shared]              |       X      |        X      |      -      |      -      |      -      |     -     |
memory[buffers]             |       X      |        X      |      -      |      -      |      -      |     -     |
memory[cached]              |       X      |        X      |      -      |      -      |      -      |     -     |
memory[free]                |       X      |        X      |      -      |      -      |      x      |     -     |

diskfree[*]                 |       X      |        X      |      X      |      X      |      X      |     X     |

inodefree[*]                |       X      |        X      |      X      |      X      |      X      |     X     |

cksum[/etc/inetd_conf]      |       X      |        X      |      X      |      X      |      X      |     X     |
cksum[/etc/services]        |       X      |        X      |      X      |      X      |      X      |     X     |
cksum[/vmlinuz]             |       X      |        X      |      X      |      X      |      X      |     X     |
cksum[/etc/passwd]          |       X      |        X      |      X      |      X      |      X      |     X     |
cksum[/usr/sbin/sshd]       |       X      |        X      |      X      |      X      |      X      |     X     |
cksum[/usr/bin/ssh]         |       X      |        X      |      X      |      X      |      X      |     X     |
      
filesize[*]                 |       X      |        X      |      x      |      X      |      x      |     x     |

swap[free]                  |       X      |        X      |      -      |      X      |      -      |     -     |
swap[total]                 |       X      |        X      |      -      |      X      |      -      |     -     |

swap[in]                    |       X      |        X      |      -      |      -      |      -      |     -     |
swap[out]                   |       X      |        X      |      -      |      -      |      -      |     -     |

system[interrupts]          |       X      |        X      |      -      |      -      |      -      |     -     |
system[switches]            |       X      |        X      |      -      |      -      |      -      |     -     |

io[disk_io]                 |       X      |        X      |      -      |      -      |      -      |     -     |
io[disk_rio]                |       X      |        X      |      -      |      -      |      -      |     -     |
io[disk_wio]                |       X      |        X      |      -      |      -      |      -      |     -     |
io[disk_rblk]               |       X      |        X      |      -      |      -      |      -      |     -     |
io[disk_wblk]               |       X      |        X      |      -      |      -      |      -      |     -     |

system[procload]            |       X      |        X      |      X      |      X      |      X      |     -     |
system[procload5]           |       X      |        X      |      X      |      X      |      X      |     -     |
system[procload15]          |       X      |        X      |      X      |      X      |      X      |     -     |
system[proccount]           |       X      |        X      |      -      |      -      |      -      |     -     |
system[procrunning]         |       X      |        X      |      -      |      -      |      -      |     -     |
system[uptime]              |       X      |        X      |      -      |      -      |      -      |     -     |
system[users]               |       X      |        X      |      X      |      X      |      X      |     X     |

ping                        |       X      |        X      |      X      |      X      |      X      |     X     |
tcp_count                   |       X      |        X      |      X      |      -      |      -      |     X     |

net[listen_23]              |       X      |        X      |      -      |      -      |      -      |     -     |
net[listen_80]              |       X      |        X      |      -      |      -      |      -      |     -     |
net[listen_110]             |       X      |        X      |      -      |      -      |      -      |     -     |
net[listen_143]             |       X      |        X      |      -      |      -      |      -      |     -     |

check_service[ftp]          |       X      |        X      |      X      |      X      |      X      |     X     |
check_service[ssh]          |       X      |        X      |      X      |      X      |      X      |     X     |
check_service[smtp]         |       X      |        X      |      X      |      X      |      X      |     X     |
check_service[pop]          |       X      |        X      |      X      |      X      |      X      |     X     |
check_service[nntp]         |       X      |        X      |      X      |      X      |      X      |     X     |
check_service[imap]         |       X      |        X      |      X      |      X      |      X      |     X     |

check_port[*]               |       X      |        X      |      X      |      X      |      X      |     X     |

proc_cnt[*]                 |       X      |        X      |      -      |      -      |      -      |     -     |

5. Miscellaneous 

5.1 pinger.pl

The script is used to periodically sind ICMP pings to list of servers. In case, if it does not receive responce from host, it executes:

zabbix_sender <server> <port> <host>:alive 0

otherwise:

zabbix_sender <server> <port> <host>:alive 1

The script is usually called from cron. Configure the script before use.  Change location for "hosts" file.  You must have fping installed to successfully run the script.

5.2 PostgreSQL notes

Performance of PostgreSQL can be significantly improved by executing the VACUUM command on the Zabbix database.

I would suggest execution of VACUUM at least after the following events:

 - Zabbix is installed
 - 10000 records in table "history"
 - patches applied on Zabbix database

For heavily loaded Zabbix servers, hourly execution of "VACUUM ANALYZE" for all tables except "history" is strongly recommended!  You can use the command 'echo "vacuum verbose analyze"|psql zabbix'.



Appendix A
Coming Soon

Appendix B
Coming Soon
