1. Chapter 1 (Introduction)

1.1 About the manuaL
1.2 Acknowledgements
1.3 What is Zabbix ?
1.4 What does Zabbix offer ?

2. Chapter 2 (Structure)
2.1 zabbix_sucker
2.2 zabbix_alarmer
2.3 zabbix_agent
2.4 zabbix_traper
2.5 zabbix_sender
2.6 Database
2.7 WEB-based frontend

3. Chapter 3 (Installation)

3.1 Requirements
3.2 Installation procedure

4. Chapter 4 (Administration)
4.1 Zabbix configuration
4.2 Expressions for triggers

5. Chapter 5 (Misc)
5.1 pinger.pl

Appendix A (Item configuration examples)
Appendix B (Trigger configuration examples)

- Chapter 1 (Introduction)

1.1 About the manual

This manual is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

This manual is part of Zabbix software.

The latest version of the manual will always be available at

http://zabbix.sourceforge.net

1.2 Acknowledgements

I want to thank guys from sourceforge.net for providing hosting for
the project. 

I also want to thank all the Zabbix users who have sent corrections and suggestions. 
This sort of feedback helps me make the software better.

1.3 What is Zabbix ?

Zabbix was created by Alexei Vladishev, (alex@gobbo.caves.lv).

Zabbix is software for monitoring various parameters of network and 
servers. Polling and trapping are supported. All monitored parameters are stored 
in Zabbix database.  It allows great reporting and data visualisation possibilities.
Additionally, Zabbix is useful toool to monitor integrity of servers to avoid break-in
attempts.
Stored data is useful source of information for capacity planning.

Flexible notification mechanism allows to configure e-mail based alerms
for virtually any pre-defined events. The alarms help to prevent
possible problems before they actually happen.

Web-based frontend is used to provide fast and efficient way for Zabbix
configuration and administration.

Properly configured Zabbix plays most important role in monitoring of IT infrastructure
for companies with even more than hundred of servers to monitor. 

The Zabbix software is free for use. However, if support is an issue for you,
that is an option as well. Please, contact alex@gobbo.caves.lv to get additional
information on available support levels. 

The latest version of Zabbix can be found at http://zabbix.sourceforge.net.

1.5 What does Zabbix offer ?

The following are amongst the features that Zabbix offer:

 - Support for both polling and traping mechanism
 - agents for Linux (HP-UX, AIX, FreeBSD, OpenBSD are coming soon)
 - server side is running under Linux (other UNIX variants to be supported soon)
 - user authorisation
 - two user groups: "Administrators" and "Zabbix users"
 - WEB-based interface
 - E-mail notification in case of predefined events

2. Chapter 2 (Structure)

Zabbix has basically client-server architecture. Zabbix server periodically
gets most recent information of parameters for monitored host. It connects to 
an agent placed on the host, asks for specific information (for example, processor load). Agent
gives the information back to server and server, in its turn, stores received
value in the database.

It is also possible to use trapping method. In tis case, monitored host sends information
to Zabbix server.

2.1 zabbix_sucker

The Zabbix server process.

SYNOPSIS

zabbix_sucker

DESCRIPTION

The process periodically connects to agents to get updated information on parameters being
monitored.

No switches are supported by zabbix_sucker.

The process is run as daemon under non-priveledged user account, usually zabbix.

2.2 zabbix_alarmer

The Zabbix server process.

SYNOPSIS

zabbix_alarmer

DESCRIPTION

The process periodically re-calculates status of triggers. It also sends alerts to users
if required.

The process is run as daemon under non-priveledged user account.

2.3 zabbix_agent

The Zabbix agent.

SYNOPSIS

zabbix_agent

DESCRIPTION

The process lives on host being monitored. zabbix_agent provides requested information to 
zabbix_sucker. zabbix_agent is called from inetd daemon.

Execution time of the process is limited. If agent was not able to get information 
during 3 seconds, it kills himself. 

When executed, it reads /etc/zabbix/zabbix_agent.conf file. This file should exist and contain
IP address of Zabbix server. Connections from other IPs are rejected.

2.4 zabbix_traper

The Zabbix server process.

SYNOPSIS

zabbix_traper

DESCRIPTION

The process is made to support traping. It constantly waits for connections from zabbix_sender
agents.  

2.5 zabbix_sender

The Zabbix agent (trapping).

SYNOPSIS

zabbix_sender zabbix_server port host:key value

DESCRIPTION

The process, when executed, sends information to Zabbix.

	zabbix_server	Name or IP address of Zabbix server to connect.
	port		Port number to connect to Zabbix. It is port number of zabbix_traper process.
	host:key	Host name and key for value.
	value		Value for parameter "host:key". Float number. 

EXAMPLE:

zabbix_sender zabbix.abcde.com 10001 db.abcde.com:procload 2.34

It means, that zabbix_sender will send information about processor load on host db.abcde.com
to Zabbix server located at zabbix.acbde.com. Processor load is 2.34.

2.6 Database

Database used by Zabbix is very important. The database is the only source
of configuration parameters and it stores all history of monitored values.

Zabbix performance higihly depends on officiency and speed of used database.
 
2.7 WEB-based frontend

The frontend provides convinient and platform independed way for accessing Zabbix.
Information provided by the frontend can be either graphical (e.g. graph on disk space
usage) or text format. Text representation of monitored parameters is made to allow
easy way for export Zabbix data to other analytical tools.

3. Chapter 3 (Installation)

3.1 Requirements

Zabbix server processes support the following platforms:

 - Linux 2.xx
 - Support for HP-UX, AIX, FreeBSD and OpenBSD is coming soon

Zabbix agents are available for the following platforms:

 - Linux 2.xx
 - Support for HP-UX, AIX, FreeBSD and OpenBSD is coming soon

Zabbix requires the following software to run properly:

 - Apache 1.3.12 or later
 - MySQL 3.22 or later
 - PHP (4.0) compiled as Apache module with GD (for PNG images) and MySQL support
 - GNU make

Memory requirements:

Zabbix requires both physical (suprise!) and disk memory. 64 Mb of physical 
memory and 50 Mb of free disk memory could be good start point.
However, amount of required memory strongly depends on used configuration 
parameters. If you're planning to keep long history of monitored parameters, 
you should think of even a couple of gigabytes to have enough space to store the history in 
the database. 

3.2 Installation procedure

3.2.1 Create the Zabbix superuser account: 

This is the user the server will run on.  For production use you should create 
a separate, unprivileged account ("zabbix" is commonly used).

Running Zabbix as "root","bin", or any other account with special rights is a 
security risk. Do not do it ! 


3.2.2 Untar Zabbix sources:

On Linux, use command tar -xvzf <zabbix.tar.gz>


3.2.3 Create the Zabbix database:

For MySQL:

mysql -u<username> -p<password>
> create database zabbix;
>quit;

cd create/mysql
cat schema.sql |mysql zabbix -u<username> -p<password>


3.2.4 Configure include/db.h

#define DB_NAME         ""
#define DB_USER         ""
#define DB_PASSWD       ""

Change these values.

3.2.5 Configure and compile the source code for your system.

cd src/zabbix_sucker
./configure
make

cd src/zabbix_alarmer
./configure
make

cd src/zabbix_agent
./configure
make

cd src/zabbix_traper
./configure
make

cd src/zabbix_sender
./configure
make

3.2.6 Copy binaries to /opt/zabbix/bin or any other directory. 

3.2.7 Configure /etc/services

Add the following lines to /etc/services:

zabbix_agent    10000/tcp
zabbix_trap     10001/tcp 

3.2.8 Configure /etc/inetd.conf

Add the following lines to /etc/inetd.conf:

zabbix_agent        stream  tcp     nowait.3600    zabbix /opt/zabbix/bin/zabbix_agent
zabbix_trap         stream  tcp     nowait.3600    zabbix /opt/zabbix/bin/zabbix_traper

3.2.9 Restart inetd

killall -HUP inetd

3.2.10 Configure WEB interface

As zabbix:


Change these values in frontends/php/include/config.inc:

        $DB_SERVER      ="localhost";
        $DB_DATABASE    ="zabbix";
        $DB_USER        ="";
        $DB_PWD         =""

mkdir /home/zabbix/html
cp -R frontends/php/* /home/zabbix/html/

4. Chapter 4 (Administration)

4.1 Zabbix configuration

 - Use WEB browser to configure Zabbix (http://localhost/~zabbix)
 - Click on "CONFIG"

Enter "Admin" as login name and leave password field empty.

Set up SMTP parameters. 

 - Click on "USERS"

Add yourself to list of Zabbix users. Do not forget to select "Administrators" group.

Delete default "Admin" user.

 - Set up available Medias for the user (Click on "Media")

 - Add host for monitoring

Be sure that you've installed agent on the host. Otherwise, set status
to "Not monitored". List of possible parameers for the host will be automatically added.

 - Configure ITEMS

 - Configure TRIGGERS

 - Run zabbix_sucker and zabbix_alarmer

/opt/zabbix/bin/zabbix_alarmer
/opt/zabbix/bin/zabbix_sucker

Define actions for triggers you are interested in.

- Create /etc/zabbix/zabbix_agent.conf

Put IP address of Zabbix server here.

4.2 Expressions for triggers

The following operators supported for triggers:

> - more than
< - less than
| - logical OR
& - logical AND

The following functions supported:

last	- last value, parameter is ignored 
min	- MIN value for period of time, parameter - time in sec
max	- MAX value for period of time, parameter - time in sec
diff	- 1 - if last and previous values are different, 0 - otherwise
prev	- previous value, parameter is ignored
nodata	- 1, if no values were received for "parameter" seconds

Simplest useful expression might look as:

{<server>:<key>.<function>(<parameter>)}<operator><const>

Example 1:

{sourceforge.net:procload.last(0)}>5

It means:

sourceforge.net - server name
procload	- key name

sourceforge.net:procload gives short name of monitored parameter.

last		- function name

Basically the expression means, processor load of sourceforge.net is more than
5. The trigger becomes true, when processor load exceeds 5. 

Example 2:

More complex example:

({sourceforge.net:procload.last(0)}>5) | ({sourceforge.net:procload.min(600)}>2)

The expression becomes true when either current processor load is more
than 5 or it was more than 2 during last 10 minutes.

Example 3:

Use of diff function.

({sourceforge.net:passwd_md5sum.diff(0)})>0

The expression becomes true when previous value of MD5 sum of /etc/passwd
differs from last one.

Similiar expressions could be useful to monitor changes in important files, such as
/etc/passwd, /etc/inetd.conf, /kernel, etc.

5. Chapter 5 (Misc)

5.1 pinger.pl

The script is used to periodically sind ICMP pings to list of servers. In case, if it does
not receive responce from host it executes:

zabbix_server <server> <port> <host>:alive 0

otherwise:

zabbix_server <server> <port> <host>:alive 1

The script is usually called from cron.
